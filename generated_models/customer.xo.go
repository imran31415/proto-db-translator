// Package generated_models contains generated code for schema 'proto_db_default'.
package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"fmt"
	"log"
	"strings"
	"time"
)

// Customer represents a row from 'Customer'.
type Customer struct {
	CustomerID   int            `json:"customer_id"`   // customer_id
	CustomerName string         `json:"customer_name"` // customer_name
	Email        string         `json:"email"`         // email
	Phone        sql.NullString `json:"phone"`         // phone
	CreatedAt    time.Time      `json:"created_at"`    // created_at
	UpdatedAt    time.Time      `json:"updated_at"`    // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Customer] exists in the database.
func (c *Customer) Exists() bool {
	return c._exists
}

// Deleted returns true when the [Customer] has been marked for deletion
// from the database.
func (c *Customer) Deleted() bool {
	return c._deleted
}

// Insert inserts the [Customer] to the database.
func (c *Customer) Insert(ctx context.Context, db DB) error {
	switch {
	case c._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case c._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO Customer (` +
		`customer_id, customer_name, email, phone, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, c.CustomerID, c.CustomerName, c.Email, c.Phone, c.CreatedAt, c.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, c.CustomerID, c.CustomerName, c.Email, c.Phone, c.CreatedAt, c.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	c._exists = true
	return nil
}

// Update updates a [Customer] in the database.
func (c *Customer) Update(ctx context.Context, db DB) error {
	switch {
	case !c._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case c._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE Customer SET ` +
		`customer_name = ?, email = ?, phone = ?, created_at = ?, updated_at = ? ` +
		`WHERE customer_id = ?`
	// run
	logf(sqlstr, c.CustomerName, c.Email, c.Phone, c.CreatedAt, c.UpdatedAt, c.CustomerID)
	if _, err := db.ExecContext(ctx, sqlstr, c.CustomerName, c.Email, c.Phone, c.CreatedAt, c.UpdatedAt, c.CustomerID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Customer] to the database.
func (c *Customer) Save(ctx context.Context, db DB) error {
	if c.Exists() {
		return c.Update(ctx, db)
	}
	return c.Insert(ctx, db)
}

// Upsert performs an upsert for [Customer].
func (c *Customer) Upsert(ctx context.Context, db DB) error {
	switch {
	case c._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO Customer (` +
		`customer_id, customer_name, email, phone, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`customer_id = VALUES(customer_id), customer_name = VALUES(customer_name), email = VALUES(email), phone = VALUES(phone), created_at = VALUES(created_at), updated_at = VALUES(updated_at)`
	// run
	logf(sqlstr, c.CustomerID, c.CustomerName, c.Email, c.Phone, c.CreatedAt, c.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, c.CustomerID, c.CustomerName, c.Email, c.Phone, c.CreatedAt, c.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	c._exists = true
	return nil
}

// Delete deletes the [Customer] from the database.
func (c *Customer) Delete(ctx context.Context, db DB) error {
	switch {
	case !c._exists: // doesn't exist
		return nil
	case c._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM Customer ` +
		`WHERE customer_id = ?`
	// run
	logf(sqlstr, c.CustomerID)
	if _, err := db.ExecContext(ctx, sqlstr, c.CustomerID); err != nil {
		return logerror(err)
	}
	// set deleted
	c._deleted = true
	return nil
}

// CustomerKeysetPage retrieves a page of [Customer] records using keyset pagination with dynamic filtering.
//
// The keyset pagination retrieves results after or before a specific value (`key`)
// for a given column (`column`) with a limit (`limit`) and order (`ASC` or `DESC`).
//
// If `order` is `ASC`, it retrieves records where the value of `column` is greater than `key`.
// If `order` is `DESC`, it retrieves records where the value of `column` is less than `key`.
//
// Filters are dynamically provided via a `filters` map, where keys are column names and values are either single values or slices for `IN` clauses.
func CustomerKeysetPage(ctx context.Context, db DB, column string, key interface{}, limit int, order string, filters map[string]interface{}) ([]*Customer, *Customer, error) {
	if order != "ASC" && order != "DESC" {
		return nil, nil, fmt.Errorf("invalid order: %s", order)
	}

	// Start building the query
	query := fmt.Sprintf(
		`SELECT * FROM Customer 
         WHERE %s %s ?`,
		column, condition(order),
	)

	// Arguments for the query
	args := []interface{}{key}

	// Dynamically add filters from the `filters` map to the query
	for field, value := range filters {
		switch v := value.(type) {
		case []int:
			if len(v) > 0 {
				placeholders := make([]string, len(v))
				for i := range v {
					placeholders[i] = "?"
					args = append(args, v[i])
				}
				query += fmt.Sprintf(" AND %s IN (%s)", field, strings.Join(placeholders, ", "))
			}
		case []string:
			if len(v) > 0 {
				placeholders := make([]string, len(v))
				for i := range v {
					placeholders[i] = "?"
					args = append(args, v[i])
				}
				query += fmt.Sprintf(" AND %s IN (%s)", field, strings.Join(placeholders, ", "))
			}
		default:
			// Handle NULL and NOT NULL checks
			if value == nil {
				query += fmt.Sprintf(" AND %s IS NULL", field)
			} else if value == "NOT NULL" {
				query += fmt.Sprintf(" AND %s IS NOT NULL", field)
			} else {
				query += fmt.Sprintf(" AND %s = ?", field)
				args = append(args, value)
			}
		}
	}

	// Finalize the query with the order and limit
	query += fmt.Sprintf(" ORDER BY %s %s LIMIT ?", column, order)
	args = append(args, limit)

	// Log the final query for debugging purposes
	log.Printf("Executing query: %s with args: %v", query, args)

	// Execute the query
	rows, err := db.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, nil, logerror(err)
	}
	defer rows.Close()

	var results []*Customer
	var lastItem *Customer // Variable to store the last item

	for rows.Next() {
		c := Customer{
			_exists: true,
		}
		if err := rows.Scan(
			&c.CustomerID, &c.CustomerName, &c.Email, &c.Phone, &c.CreatedAt, &c.UpdatedAt,
		); err != nil {
			return nil, nil, logerror(err)
		}
		results = append(results, &c)
	}

	// Check for errors during row iteration.
	if err := rows.Err(); err != nil {
		return nil, nil, logerror(err)
	}

	// If we have results, set the lastItem to the last element in results.
	if len(results) > 0 {
		lastItem = results[len(results)-1]
	}

	return results, lastItem, nil
}

// CustomerByCustomerID retrieves a row from 'Customer' as a [Customer].
//
// Generated from index 'Customer_customer_id_pkey'.
func CustomerByCustomerID(ctx context.Context, db DB, customerID int) (*Customer, error) {
	// query
	const sqlstr = `SELECT ` +
		`customer_id, customer_name, email, phone, created_at, updated_at ` +
		`FROM Customer ` +
		`WHERE customer_id = ?`
	// run
	logf(sqlstr, customerID)
	c := Customer{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, customerID).Scan(&c.CustomerID, &c.CustomerName, &c.Email, &c.Phone, &c.CreatedAt, &c.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &c, nil
}

// CustomerByEmail retrieves a row from 'Customer' as a [Customer].
//
// Generated from index 'email'.
func CustomerByEmail(ctx context.Context, db DB, email string) (*Customer, error) {
	// query
	const sqlstr = `SELECT ` +
		`customer_id, customer_name, email, phone, created_at, updated_at ` +
		`FROM Customer ` +
		`WHERE email = ?`
	// run
	logf(sqlstr, email)
	c := Customer{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, email).Scan(&c.CustomerID, &c.CustomerName, &c.Email, &c.Phone, &c.CreatedAt, &c.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &c, nil
}
