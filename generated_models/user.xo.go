package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"fmt"
	"log"
	"strings"
	"time"
)

// User represents a row from 'User'.
type User struct {
	ID              int            `json:"id"`                // id
	Username        string         `json:"username"`          // username
	Email           string         `json:"email"`             // email
	HashedPassword  string         `json:"hashed_password"`   // hashed_password
	Is2faEnabled    bool           `json:"is_2fa_enabled"`    // is_2fa_enabled
	TwoFactorSecret sql.NullString `json:"two_factor_secret"` // two_factor_secret
	CreatedAt       time.Time      `json:"created_at"`        // created_at
	UpdatedAt       time.Time      `json:"updated_at"`        // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [User] exists in the database.
func (u *User) Exists() bool {
	return u._exists
}

// Deleted returns true when the [User] has been marked for deletion
// from the database.
func (u *User) Deleted() bool {
	return u._deleted
}

// Insert inserts the [User] to the database.
func (u *User) Insert(ctx context.Context, db DB) error {
	switch {
	case u._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case u._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO User (` +
		`id, username, email, hashed_password, is_2fa_enabled, two_factor_secret, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, u.ID, u.Username, u.Email, u.HashedPassword, u.Is2faEnabled, u.TwoFactorSecret, u.CreatedAt, u.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, u.ID, u.Username, u.Email, u.HashedPassword, u.Is2faEnabled, u.TwoFactorSecret, u.CreatedAt, u.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	u._exists = true
	return nil
}

// Update updates a [User] in the database.
func (u *User) Update(ctx context.Context, db DB) error {
	switch {
	case !u._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case u._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE User SET ` +
		`username = ?, email = ?, hashed_password = ?, is_2fa_enabled = ?, two_factor_secret = ?, created_at = ?, updated_at = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, u.Username, u.Email, u.HashedPassword, u.Is2faEnabled, u.TwoFactorSecret, u.CreatedAt, u.UpdatedAt, u.ID)
	if _, err := db.ExecContext(ctx, sqlstr, u.Username, u.Email, u.HashedPassword, u.Is2faEnabled, u.TwoFactorSecret, u.CreatedAt, u.UpdatedAt, u.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [User] to the database.
func (u *User) Save(ctx context.Context, db DB) error {
	if u.Exists() {
		return u.Update(ctx, db)
	}
	return u.Insert(ctx, db)
}

// Upsert performs an upsert for [User].
func (u *User) Upsert(ctx context.Context, db DB) error {
	switch {
	case u._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO User (` +
		`id, username, email, hashed_password, is_2fa_enabled, two_factor_secret, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`id = VALUES(id), username = VALUES(username), email = VALUES(email), hashed_password = VALUES(hashed_password), is_2fa_enabled = VALUES(is_2fa_enabled), two_factor_secret = VALUES(two_factor_secret), created_at = VALUES(created_at), updated_at = VALUES(updated_at)`
	// run
	logf(sqlstr, u.ID, u.Username, u.Email, u.HashedPassword, u.Is2faEnabled, u.TwoFactorSecret, u.CreatedAt, u.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, u.ID, u.Username, u.Email, u.HashedPassword, u.Is2faEnabled, u.TwoFactorSecret, u.CreatedAt, u.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	u._exists = true
	return nil
}

// Delete deletes the [User] from the database.
func (u *User) Delete(ctx context.Context, db DB) error {
	switch {
	case !u._exists: // doesn't exist
		return nil
	case u._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM User ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, u.ID)
	if _, err := db.ExecContext(ctx, sqlstr, u.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	u._deleted = true
	return nil
}

// UserKeysetPage retrieves a page of [User] records using keyset pagination with dynamic filtering.
//
// The keyset pagination retrieves results after or before a specific value (`key`)
// for a given column (`column`) with a limit (`limit`) and order (`ASC` or `DESC`).
//
// If `order` is `ASC`, it retrieves records where the value of `column` is greater than `key`.
// If `order` is `DESC`, it retrieves records where the value of `column` is less than `key`.
//
// Filters are dynamically provided via a `filters` map, where keys are column names and values are either single values or slices for `IN` clauses.
func UserKeysetPage(ctx context.Context, db DB, column string, key interface{}, limit int, order string, filters map[string]interface{}) ([]*User, *User, error) {
	if order != "ASC" && order != "DESC" {
		return nil, nil, fmt.Errorf("invalid order: %s", order)
	}

	// Start building the query
	query := fmt.Sprintf(
		`SELECT * FROM User 
         WHERE %s %s ?`,
		column, condition(order),
	)

	// Arguments for the query
	args := []interface{}{key}

	// Dynamically add filters from the `filters` map to the query
	for field, value := range filters {
		switch v := value.(type) {
		case []int:
			if len(v) > 0 {
				placeholders := make([]string, len(v))
				for i := range v {
					placeholders[i] = "?"
					args = append(args, v[i])
				}
				query += fmt.Sprintf(" AND %s IN (%s)", field, strings.Join(placeholders, ", "))
			}
		case []string:
			if len(v) > 0 {
				placeholders := make([]string, len(v))
				for i := range v {
					placeholders[i] = "?"
					args = append(args, v[i])
				}
				query += fmt.Sprintf(" AND %s IN (%s)", field, strings.Join(placeholders, ", "))
			}
		default:
			// Handle NULL and NOT NULL checks
			if value == nil {
				query += fmt.Sprintf(" AND %s IS NULL", field)
			} else if value == "NOT NULL" {
				query += fmt.Sprintf(" AND %s IS NOT NULL", field)
			} else {
				query += fmt.Sprintf(" AND %s = ?", field)
				args = append(args, value)
			}
		}
	}

	// Finalize the query with the order and limit
	query += fmt.Sprintf(" ORDER BY %s %s LIMIT ?", column, order)
	args = append(args, limit)

	// Log the final query for debugging purposes
	log.Printf("Executing query: %s with args: %v", query, args)

	// Execute the query
	rows, err := db.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, nil, logerror(err)
	}
	defer rows.Close()

	var results []*User
	var lastItem *User // Variable to store the last item

	for rows.Next() {
		u := User{
			_exists: true,
		}
		if err := rows.Scan(
			&u.ID, &u.Username, &u.Email, &u.HashedPassword, &u.Is2faEnabled, &u.TwoFactorSecret, &u.CreatedAt, &u.UpdatedAt,
		); err != nil {
			return nil, nil, logerror(err)
		}
		results = append(results, &u)
	}

	// Check for errors during row iteration.
	if err := rows.Err(); err != nil {
		return nil, nil, logerror(err)
	}

	// If we have results, set the lastItem to the last element in results.
	if len(results) > 0 {
		lastItem = results[len(results)-1]
	}

	return results, lastItem, nil
}

// UserByID retrieves a row from 'User' as a [User].
//
// Generated from index 'User_id_pkey'.
func UserByID(ctx context.Context, db DB, id int) (*User, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, username, email, hashed_password, is_2fa_enabled, two_factor_secret, created_at, updated_at ` +
		`FROM User ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	u := User{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&u.ID, &u.Username, &u.Email, &u.HashedPassword, &u.Is2faEnabled, &u.TwoFactorSecret, &u.CreatedAt, &u.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &u, nil
}

// UserByEmail retrieves a row from 'User' as a [User].
//
// Generated from index 'email'.
func UserByEmail(ctx context.Context, db DB, email string) (*User, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, username, email, hashed_password, is_2fa_enabled, two_factor_secret, created_at, updated_at ` +
		`FROM User ` +
		`WHERE email = ?`
	// run
	logf(sqlstr, email)
	u := User{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, email).Scan(&u.ID, &u.Username, &u.Email, &u.HashedPassword, &u.Is2faEnabled, &u.TwoFactorSecret, &u.CreatedAt, &u.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &u, nil
}

// UserByUsername retrieves a row from 'User' as a [User].
//
// Generated from index 'username'.
func UserByUsername(ctx context.Context, db DB, username string) (*User, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, username, email, hashed_password, is_2fa_enabled, two_factor_secret, created_at, updated_at ` +
		`FROM User ` +
		`WHERE username = ?`
	// run
	logf(sqlstr, username)
	u := User{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, username).Scan(&u.ID, &u.Username, &u.Email, &u.HashedPassword, &u.Is2faEnabled, &u.TwoFactorSecret, &u.CreatedAt, &u.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &u, nil
}
