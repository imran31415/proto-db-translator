package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"
)

// Order represents a row from 'Orders'.
type Order struct {
	OrderID     int       `json:"order_id"`     // order_id
	CustomerID  int       `json:"customer_id"`  // customer_id
	OrderDate   time.Time `json:"order_date"`   // order_date
	TotalAmount float32   `json:"total_amount"` // total_amount
	Status      string    `json:"status"`       // status
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Order] exists in the database.
func (o *Order) Exists() bool {
	return o._exists
}

// Deleted returns true when the [Order] has been marked for deletion
// from the database.
func (o *Order) Deleted() bool {
	return o._deleted
}

// Insert inserts the [Order] to the database.
func (o *Order) Insert(ctx context.Context, db DB) error {
	switch {
	case o._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case o._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO Orders (` +
		`order_id, customer_id, order_date, total_amount, status` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, o.OrderID, o.CustomerID, o.OrderDate, o.TotalAmount, o.Status)
	if _, err := db.ExecContext(ctx, sqlstr, o.OrderID, o.CustomerID, o.OrderDate, o.TotalAmount, o.Status); err != nil {
		return logerror(err)
	}
	// set exists
	o._exists = true
	return nil
}

// Update updates a [Order] in the database.
func (o *Order) Update(ctx context.Context, db DB) error {
	switch {
	case !o._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case o._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE Orders SET ` +
		`customer_id = ?, order_date = ?, total_amount = ?, status = ? ` +
		`WHERE order_id = ?`
	// run
	logf(sqlstr, o.CustomerID, o.OrderDate, o.TotalAmount, o.Status, o.OrderID)
	if _, err := db.ExecContext(ctx, sqlstr, o.CustomerID, o.OrderDate, o.TotalAmount, o.Status, o.OrderID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Order] to the database.
func (o *Order) Save(ctx context.Context, db DB) error {
	if o.Exists() {
		return o.Update(ctx, db)
	}
	return o.Insert(ctx, db)
}

// Upsert performs an upsert for [Order].
func (o *Order) Upsert(ctx context.Context, db DB) error {
	switch {
	case o._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO Orders (` +
		`order_id, customer_id, order_date, total_amount, status` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`order_id = VALUES(order_id), customer_id = VALUES(customer_id), order_date = VALUES(order_date), total_amount = VALUES(total_amount), status = VALUES(status)`
	// run
	logf(sqlstr, o.OrderID, o.CustomerID, o.OrderDate, o.TotalAmount, o.Status)
	if _, err := db.ExecContext(ctx, sqlstr, o.OrderID, o.CustomerID, o.OrderDate, o.TotalAmount, o.Status); err != nil {
		return logerror(err)
	}
	// set exists
	o._exists = true
	return nil
}

// Delete deletes the [Order] from the database.
func (o *Order) Delete(ctx context.Context, db DB) error {
	switch {
	case !o._exists: // doesn't exist
		return nil
	case o._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM Orders ` +
		`WHERE order_id = ?`
	// run
	logf(sqlstr, o.OrderID)
	if _, err := db.ExecContext(ctx, sqlstr, o.OrderID); err != nil {
		return logerror(err)
	}
	// set deleted
	o._deleted = true
	return nil
}

// OrderKeysetPage retrieves a page of [Order] records using keyset pagination with dynamic filtering.
//
// The keyset pagination retrieves results after or before a specific value (`key`)
// for a given column (`column`) with a limit (`limit`) and order (`ASC` or `DESC`).
//
// If `order` is `ASC`, it retrieves records where the value of `column` is greater than `key`.
// If `order` is `DESC`, it retrieves records where the value of `column` is less than `key`.
//
// Filters are dynamically provided via a `filters` map, where keys are column names and values are either single values or slices for `IN` clauses.
func OrderKeysetPage(ctx context.Context, db DB, column string, key interface{}, limit int, order string, filters map[string]interface{}) ([]*Order, *Order, error) {
	if order != "ASC" && order != "DESC" {
		return nil, nil, fmt.Errorf("invalid order: %s", order)
	}

	// Start building the query
	query := fmt.Sprintf(
		`SELECT * FROM Orders 
         WHERE %s %s ?`,
		column, condition(order),
	)

	// Arguments for the query
	args := []interface{}{key}

	// Dynamically add filters from the `filters` map to the query
	for field, value := range filters {
		switch v := value.(type) {
		case []int:
			if len(v) > 0 {
				placeholders := make([]string, len(v))
				for i := range v {
					placeholders[i] = "?"
					args = append(args, v[i])
				}
				query += fmt.Sprintf(" AND %s IN (%s)", field, strings.Join(placeholders, ", "))
			}
		case []string:
			if len(v) > 0 {
				placeholders := make([]string, len(v))
				for i := range v {
					placeholders[i] = "?"
					args = append(args, v[i])
				}
				query += fmt.Sprintf(" AND %s IN (%s)", field, strings.Join(placeholders, ", "))
			}
		default:
			// Handle NULL and NOT NULL checks
			if value == nil {
				query += fmt.Sprintf(" AND %s IS NULL", field)
			} else if value == "NOT NULL" {
				query += fmt.Sprintf(" AND %s IS NOT NULL", field)
			} else {
				query += fmt.Sprintf(" AND %s = ?", field)
				args = append(args, value)
			}
		}
	}

	// Finalize the query with the order and limit
	query += fmt.Sprintf(" ORDER BY %s %s LIMIT ?", column, order)
	args = append(args, limit)

	// Log the final query for debugging purposes
	log.Printf("Executing query: %s with args: %v", query, args)

	// Execute the query
	rows, err := db.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, nil, logerror(err)
	}
	defer rows.Close()

	var results []*Order
	var lastItem *Order // Variable to store the last item

	for rows.Next() {
		o := Order{
			_exists: true,
		}
		if err := rows.Scan(
			&o.OrderID, &o.CustomerID, &o.OrderDate, &o.TotalAmount, &o.Status,
		); err != nil {
			return nil, nil, logerror(err)
		}
		results = append(results, &o)
	}

	// Check for errors during row iteration.
	if err := rows.Err(); err != nil {
		return nil, nil, logerror(err)
	}

	// If we have results, set the lastItem to the last element in results.
	if len(results) > 0 {
		lastItem = results[len(results)-1]
	}

	return results, lastItem, nil
}

// OrderByOrderDateStatus retrieves a row from 'Orders' as a [Order].
//
// Generated from index 'Orders_order_date_status_idx'.
func OrderByOrderDateStatus(ctx context.Context, db DB, orderDate time.Time, status string) (*Order, error) {
	// query
	const sqlstr = `SELECT ` +
		`order_id, customer_id, order_date, total_amount, status ` +
		`FROM Orders ` +
		`WHERE order_date = ? AND status = ?`
	// run
	logf(sqlstr, orderDate, status)
	o := Order{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, orderDate, status).Scan(&o.OrderID, &o.CustomerID, &o.OrderDate, &o.TotalAmount, &o.Status); err != nil {
		return nil, logerror(err)
	}
	return &o, nil
}

// OrderByOrderID retrieves a row from 'Orders' as a [Order].
//
// Generated from index 'Orders_order_id_pkey'.
func OrderByOrderID(ctx context.Context, db DB, orderID int) (*Order, error) {
	// query
	const sqlstr = `SELECT ` +
		`order_id, customer_id, order_date, total_amount, status ` +
		`FROM Orders ` +
		`WHERE order_id = ?`
	// run
	logf(sqlstr, orderID)
	o := Order{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, orderID).Scan(&o.OrderID, &o.CustomerID, &o.OrderDate, &o.TotalAmount, &o.Status); err != nil {
		return nil, logerror(err)
	}
	return &o, nil
}

// OrdersByCustomerID retrieves a row from 'Orders' as a [Order].
//
// Generated from index 'customer_id'.
func OrdersByCustomerID(ctx context.Context, db DB, customerID int) ([]*Order, error) {
	// query
	const sqlstr = `SELECT ` +
		`order_id, customer_id, order_date, total_amount, status ` +
		`FROM Orders ` +
		`WHERE customer_id = ?`
	// run
	logf(sqlstr, customerID)
	rows, err := db.QueryContext(ctx, sqlstr, customerID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Order
	for rows.Next() {
		o := Order{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&o.OrderID, &o.CustomerID, &o.OrderDate, &o.TotalAmount, &o.Status); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &o)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Customer returns the Customer associated with the [Order]'s (CustomerID).
//
// Generated from foreign key 'orders_ibfk_1'.
func (o *Order) Customer(ctx context.Context, db DB) (*Customer, error) {
	return CustomerByCustomerID(ctx, db, o.CustomerID)
}
