package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// Role represents a row from 'prototestdb123.Role'.
type Role struct {
	RoleID       int            `json:"role_id"`        // role_id
	RoleName     string         `json:"role_name"`      // role_name
	CreatedAt    time.Time      `json:"created_at"`     // created_at
	UpdatedAt    time.Time      `json:"updated_at"`     // updated_at
	ParentRoleID sql.NullInt64  `json:"parent_role_id"` // parent_role_id
	Description  sql.NullString `json:"description"`    // description
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Role] exists in the database.
func (r *Role) Exists() bool {
	return r._exists
}

// Deleted returns true when the [Role] has been marked for deletion
// from the database.
func (r *Role) Deleted() bool {
	return r._deleted
}

// Insert inserts the [Role] to the database.
func (r *Role) Insert(ctx context.Context, db DB) error {
	switch {
	case r._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case r._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO prototestdb123.Role (` +
		`role_name, created_at, updated_at, parent_role_id, description` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, r.RoleName, r.CreatedAt, r.UpdatedAt, r.ParentRoleID, r.Description)
	res, err := db.ExecContext(ctx, sqlstr, r.RoleName, r.CreatedAt, r.UpdatedAt, r.ParentRoleID, r.Description)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	r.RoleID = int(id)
	// set exists
	r._exists = true
	return nil
}

// Update updates a [Role] in the database.
func (r *Role) Update(ctx context.Context, db DB) error {
	switch {
	case !r._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case r._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE prototestdb123.Role SET ` +
		`role_name = ?, created_at = ?, updated_at = ?, parent_role_id = ?, description = ? ` +
		`WHERE role_id = ?`
	// run
	logf(sqlstr, r.RoleName, r.CreatedAt, r.UpdatedAt, r.ParentRoleID, r.Description, r.RoleID)
	if _, err := db.ExecContext(ctx, sqlstr, r.RoleName, r.CreatedAt, r.UpdatedAt, r.ParentRoleID, r.Description, r.RoleID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Role] to the database.
func (r *Role) Save(ctx context.Context, db DB) error {
	if r.Exists() {
		return r.Update(ctx, db)
	}
	return r.Insert(ctx, db)
}

// Upsert performs an upsert for [Role].
func (r *Role) Upsert(ctx context.Context, db DB) error {
	switch {
	case r._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO prototestdb123.Role (` +
		`role_id, role_name, created_at, updated_at, parent_role_id, description` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`role_name = VALUES(role_name), created_at = VALUES(created_at), updated_at = VALUES(updated_at), parent_role_id = VALUES(parent_role_id), description = VALUES(description)`
	// run
	logf(sqlstr, r.RoleID, r.RoleName, r.CreatedAt, r.UpdatedAt, r.ParentRoleID, r.Description)
	if _, err := db.ExecContext(ctx, sqlstr, r.RoleID, r.RoleName, r.CreatedAt, r.UpdatedAt, r.ParentRoleID, r.Description); err != nil {
		return logerror(err)
	}
	// set exists
	r._exists = true
	return nil
}

// Delete deletes the [Role] from the database.
func (r *Role) Delete(ctx context.Context, db DB) error {
	switch {
	case !r._exists: // doesn't exist
		return nil
	case r._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM prototestdb123.Role ` +
		`WHERE role_id = ?`
	// run
	logf(sqlstr, r.RoleID)
	if _, err := db.ExecContext(ctx, sqlstr, r.RoleID); err != nil {
		return logerror(err)
	}
	// set deleted
	r._deleted = true
	return nil
}

// RoleByRoleID retrieves a row from 'prototestdb123.Role' as a [Role].
//
// Generated from index 'Role_role_id_pkey'.
func RoleByRoleID(ctx context.Context, db DB, roleID int) (*Role, error) {
	// query
	const sqlstr = `SELECT ` +
		`role_id, role_name, created_at, updated_at, parent_role_id, description ` +
		`FROM prototestdb123.Role ` +
		`WHERE role_id = ?`
	// run
	logf(sqlstr, roleID)
	r := Role{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, roleID).Scan(&r.RoleID, &r.RoleName, &r.CreatedAt, &r.UpdatedAt, &r.ParentRoleID, &r.Description); err != nil {
		return nil, logerror(err)
	}
	return &r, nil
}

// RoleByParentRoleID retrieves a row from 'prototestdb123.Role' as a [Role].
//
// Generated from index 'parent_role_id'.
func RoleByParentRoleID(ctx context.Context, db DB, parentRoleID sql.NullInt64) ([]*Role, error) {
	// query
	const sqlstr = `SELECT ` +
		`role_id, role_name, created_at, updated_at, parent_role_id, description ` +
		`FROM prototestdb123.Role ` +
		`WHERE parent_role_id = ?`
	// run
	logf(sqlstr, parentRoleID)
	rows, err := db.QueryContext(ctx, sqlstr, parentRoleID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Role
	for rows.Next() {
		r := Role{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&r.RoleID, &r.RoleName, &r.CreatedAt, &r.UpdatedAt, &r.ParentRoleID, &r.Description); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &r)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// RoleByRoleName retrieves a row from 'prototestdb123.Role' as a [Role].
//
// Generated from index 'role_name'.
func RoleByRoleName(ctx context.Context, db DB, roleName string) (*Role, error) {
	// query
	const sqlstr = `SELECT ` +
		`role_id, role_name, created_at, updated_at, parent_role_id, description ` +
		`FROM prototestdb123.Role ` +
		`WHERE role_name = ?`
	// run
	logf(sqlstr, roleName)
	r := Role{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, roleName).Scan(&r.RoleID, &r.RoleName, &r.CreatedAt, &r.UpdatedAt, &r.ParentRoleID, &r.Description); err != nil {
		return nil, logerror(err)
	}
	return &r, nil
}

// Role returns the Role associated with the [Role]'s (ParentRoleID).
//
// Generated from foreign key 'role_ibfk_1'.
func (r *Role) Role(ctx context.Context, db DB) (*Role, error) {
	return RoleByRoleID(ctx, db, int(r.ParentRoleID.Int64))
}
