package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"fmt"
	"log"
	"strings"
	"time"
)

// Product represents a row from 'Product'.
type Product struct {
	ProductID     int            `json:"product_id"`     // product_id
	Name          string         `json:"name"`           // name
	Description   sql.NullString `json:"description"`    // description
	Price         float32        `json:"price"`          // price
	StockQuantity int            `json:"stock_quantity"` // stock_quantity
	CreatedAt     time.Time      `json:"created_at"`     // created_at
	UpdatedAt     time.Time      `json:"updated_at"`     // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Product] exists in the database.
func (p *Product) Exists() bool {
	return p._exists
}

// Deleted returns true when the [Product] has been marked for deletion
// from the database.
func (p *Product) Deleted() bool {
	return p._deleted
}

// Insert inserts the [Product] to the database.
func (p *Product) Insert(ctx context.Context, db DB) error {
	switch {
	case p._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case p._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO Product (` +
		`name, description, price, stock_quantity, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, p.Name, p.Description, p.Price, p.StockQuantity, p.CreatedAt, p.UpdatedAt)
	res, err := db.ExecContext(ctx, sqlstr, p.Name, p.Description, p.Price, p.StockQuantity, p.CreatedAt, p.UpdatedAt)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	p.ProductID = int(id)
	// set exists
	p._exists = true
	return nil
}

// Update updates a [Product] in the database.
func (p *Product) Update(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case p._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE Product SET ` +
		`name = ?, description = ?, price = ?, stock_quantity = ?, created_at = ?, updated_at = ? ` +
		`WHERE product_id = ?`
	// run
	logf(sqlstr, p.Name, p.Description, p.Price, p.StockQuantity, p.CreatedAt, p.UpdatedAt, p.ProductID)
	if _, err := db.ExecContext(ctx, sqlstr, p.Name, p.Description, p.Price, p.StockQuantity, p.CreatedAt, p.UpdatedAt, p.ProductID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Product] to the database.
func (p *Product) Save(ctx context.Context, db DB) error {
	if p.Exists() {
		return p.Update(ctx, db)
	}
	return p.Insert(ctx, db)
}

// Upsert performs an upsert for [Product].
func (p *Product) Upsert(ctx context.Context, db DB) error {
	switch {
	case p._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO Product (` +
		`product_id, name, description, price, stock_quantity, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`name = VALUES(name), description = VALUES(description), price = VALUES(price), stock_quantity = VALUES(stock_quantity), created_at = VALUES(created_at), updated_at = VALUES(updated_at)`
	// run
	logf(sqlstr, p.ProductID, p.Name, p.Description, p.Price, p.StockQuantity, p.CreatedAt, p.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, p.ProductID, p.Name, p.Description, p.Price, p.StockQuantity, p.CreatedAt, p.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Delete deletes the [Product] from the database.
func (p *Product) Delete(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return nil
	case p._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM Product ` +
		`WHERE product_id = ?`
	// run
	logf(sqlstr, p.ProductID)
	if _, err := db.ExecContext(ctx, sqlstr, p.ProductID); err != nil {
		return logerror(err)
	}
	// set deleted
	p._deleted = true
	return nil
}

// ProductKeysetPage retrieves a page of [Product] records using keyset pagination with dynamic filtering.
//
// The keyset pagination retrieves results after or before a specific value (`key`)
// for a given column (`column`) with a limit (`limit`) and order (`ASC` or `DESC`).
//
// If `order` is `ASC`, it retrieves records where the value of `column` is greater than `key`.
// If `order` is `DESC`, it retrieves records where the value of `column` is less than `key`.
//
// Filters are dynamically provided via a `filters` map, where keys are column names and values are either single values or slices for `IN` clauses.
func ProductKeysetPage(ctx context.Context, db DB, column string, key interface{}, limit int, order string, filters map[string]interface{}) ([]*Product, *Product, error) {
	if order != "ASC" && order != "DESC" {
		return nil, nil, fmt.Errorf("invalid order: %s", order)
	}

	// Start building the query
	query := fmt.Sprintf(
		`SELECT * FROM Product 
         WHERE %s %s ?`,
		column, condition(order),
	)

	// Arguments for the query
	args := []interface{}{key}

	// Dynamically add filters from the `filters` map to the query
	for field, value := range filters {
		switch v := value.(type) {
		case []int:
			if len(v) > 0 {
				placeholders := make([]string, len(v))
				for i := range v {
					placeholders[i] = "?"
					args = append(args, v[i])
				}
				query += fmt.Sprintf(" AND %s IN (%s)", field, strings.Join(placeholders, ", "))
			}
		case []string:
			if len(v) > 0 {
				placeholders := make([]string, len(v))
				for i := range v {
					placeholders[i] = "?"
					args = append(args, v[i])
				}
				query += fmt.Sprintf(" AND %s IN (%s)", field, strings.Join(placeholders, ", "))
			}
		default:
			// Handle NULL and NOT NULL checks
			if value == nil {
				query += fmt.Sprintf(" AND %s IS NULL", field)
			} else if value == "NOT NULL" {
				query += fmt.Sprintf(" AND %s IS NOT NULL", field)
			} else {
				query += fmt.Sprintf(" AND %s = ?", field)
				args = append(args, value)
			}
		}
	}

	// Finalize the query with the order and limit
	query += fmt.Sprintf(" ORDER BY %s %s LIMIT ?", column, order)
	args = append(args, limit)

	// Log the final query for debugging purposes
	log.Printf("Executing query: %s with args: %v", query, args)

	// Execute the query
	rows, err := db.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, nil, logerror(err)
	}
	defer rows.Close()

	var results []*Product
	var lastItem *Product // Variable to store the last item

	for rows.Next() {
		p := Product{
			_exists: true,
		}
		if err := rows.Scan(
			&p.ProductID, &p.Name, &p.Description, &p.Price, &p.StockQuantity, &p.CreatedAt, &p.UpdatedAt,
		); err != nil {
			return nil, nil, logerror(err)
		}
		results = append(results, &p)
	}

	// Check for errors during row iteration.
	if err := rows.Err(); err != nil {
		return nil, nil, logerror(err)
	}

	// If we have results, set the lastItem to the last element in results.
	if len(results) > 0 {
		lastItem = results[len(results)-1]
	}

	return results, lastItem, nil
}

// ProductByProductID retrieves a row from 'Product' as a [Product].
//
// Generated from index 'Product_product_id_pkey'.
func ProductByProductID(ctx context.Context, db DB, productID int) (*Product, error) {
	// query
	const sqlstr = `SELECT ` +
		`product_id, name, description, price, stock_quantity, created_at, updated_at ` +
		`FROM Product ` +
		`WHERE product_id = ?`
	// run
	logf(sqlstr, productID)
	p := Product{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, productID).Scan(&p.ProductID, &p.Name, &p.Description, &p.Price, &p.StockQuantity, &p.CreatedAt, &p.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &p, nil
}

// ProductByName retrieves a row from 'Product' as a [Product].
//
// Generated from index 'name'.
func ProductByName(ctx context.Context, db DB, name string) (*Product, error) {
	// query
	const sqlstr = `SELECT ` +
		`product_id, name, description, price, stock_quantity, created_at, updated_at ` +
		`FROM Product ` +
		`WHERE name = ?`
	// run
	logf(sqlstr, name)
	p := Product{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, name).Scan(&p.ProductID, &p.Name, &p.Description, &p.Price, &p.StockQuantity, &p.CreatedAt, &p.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &p, nil
}
