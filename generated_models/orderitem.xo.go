package generated_models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"fmt"
	"log"
	"strings"
)

// OrderItem represents a row from 'OrderItems'.
type OrderItem struct {
	OrderItemID  int     `json:"order_item_id"`  // order_item_id
	OrderID      int     `json:"order_id"`       // order_id
	ProductID    int     `json:"product_id"`     // product_id
	Quantity     int     `json:"quantity"`       // quantity
	PricePerUnit float32 `json:"price_per_unit"` // price_per_unit
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [OrderItem] exists in the database.
func (oi *OrderItem) Exists() bool {
	return oi._exists
}

// Deleted returns true when the [OrderItem] has been marked for deletion
// from the database.
func (oi *OrderItem) Deleted() bool {
	return oi._deleted
}

// Insert inserts the [OrderItem] to the database.
func (oi *OrderItem) Insert(ctx context.Context, db DB) error {
	switch {
	case oi._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case oi._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO OrderItems (` +
		`order_id, product_id, quantity, price_per_unit` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, oi.OrderID, oi.ProductID, oi.Quantity, oi.PricePerUnit)
	res, err := db.ExecContext(ctx, sqlstr, oi.OrderID, oi.ProductID, oi.Quantity, oi.PricePerUnit)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	oi.OrderItemID = int(id)
	// set exists
	oi._exists = true
	return nil
}

// Update updates a [OrderItem] in the database.
func (oi *OrderItem) Update(ctx context.Context, db DB) error {
	switch {
	case !oi._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case oi._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE OrderItems SET ` +
		`order_id = ?, product_id = ?, quantity = ?, price_per_unit = ? ` +
		`WHERE order_item_id = ?`
	// run
	logf(sqlstr, oi.OrderID, oi.ProductID, oi.Quantity, oi.PricePerUnit, oi.OrderItemID)
	if _, err := db.ExecContext(ctx, sqlstr, oi.OrderID, oi.ProductID, oi.Quantity, oi.PricePerUnit, oi.OrderItemID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [OrderItem] to the database.
func (oi *OrderItem) Save(ctx context.Context, db DB) error {
	if oi.Exists() {
		return oi.Update(ctx, db)
	}
	return oi.Insert(ctx, db)
}

// Upsert performs an upsert for [OrderItem].
func (oi *OrderItem) Upsert(ctx context.Context, db DB) error {
	switch {
	case oi._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO OrderItems (` +
		`order_item_id, order_id, product_id, quantity, price_per_unit` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`order_id = VALUES(order_id), product_id = VALUES(product_id), quantity = VALUES(quantity), price_per_unit = VALUES(price_per_unit)`
	// run
	logf(sqlstr, oi.OrderItemID, oi.OrderID, oi.ProductID, oi.Quantity, oi.PricePerUnit)
	if _, err := db.ExecContext(ctx, sqlstr, oi.OrderItemID, oi.OrderID, oi.ProductID, oi.Quantity, oi.PricePerUnit); err != nil {
		return logerror(err)
	}
	// set exists
	oi._exists = true
	return nil
}

// Delete deletes the [OrderItem] from the database.
func (oi *OrderItem) Delete(ctx context.Context, db DB) error {
	switch {
	case !oi._exists: // doesn't exist
		return nil
	case oi._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM OrderItems ` +
		`WHERE order_item_id = ?`
	// run
	logf(sqlstr, oi.OrderItemID)
	if _, err := db.ExecContext(ctx, sqlstr, oi.OrderItemID); err != nil {
		return logerror(err)
	}
	// set deleted
	oi._deleted = true
	return nil
}

// OrderItemKeysetPage retrieves a page of [OrderItem] records using keyset pagination with dynamic filtering.
//
// The keyset pagination retrieves results after or before a specific value (`key`)
// for a given column (`column`) with a limit (`limit`) and order (`ASC` or `DESC`).
//
// If `order` is `ASC`, it retrieves records where the value of `column` is greater than `key`.
// If `order` is `DESC`, it retrieves records where the value of `column` is less than `key`.
//
// Filters are dynamically provided via a `filters` map, where keys are column names and values are either single values or slices for `IN` clauses.
func OrderItemKeysetPage(ctx context.Context, db DB, column string, key interface{}, limit int, order string, filters map[string]interface{}) ([]*OrderItem, *OrderItem, error) {
	if order != "ASC" && order != "DESC" {
		return nil, nil, fmt.Errorf("invalid order: %s", order)
	}

	// Start building the query
	query := fmt.Sprintf(
		`SELECT * FROM OrderItems 
         WHERE %s %s ?`,
		column, condition(order),
	)

	// Arguments for the query
	args := []interface{}{key}

	// Dynamically add filters from the `filters` map to the query
	for field, value := range filters {
		switch v := value.(type) {
		case []int:
			if len(v) > 0 {
				placeholders := make([]string, len(v))
				for i := range v {
					placeholders[i] = "?"
					args = append(args, v[i])
				}
				query += fmt.Sprintf(" AND %s IN (%s)", field, strings.Join(placeholders, ", "))
			}
		case []string:
			if len(v) > 0 {
				placeholders := make([]string, len(v))
				for i := range v {
					placeholders[i] = "?"
					args = append(args, v[i])
				}
				query += fmt.Sprintf(" AND %s IN (%s)", field, strings.Join(placeholders, ", "))
			}
		default:
			// Handle NULL and NOT NULL checks
			if value == nil {
				query += fmt.Sprintf(" AND %s IS NULL", field)
			} else if value == "NOT NULL" {
				query += fmt.Sprintf(" AND %s IS NOT NULL", field)
			} else {
				query += fmt.Sprintf(" AND %s = ?", field)
				args = append(args, value)
			}
		}
	}

	// Finalize the query with the order and limit
	query += fmt.Sprintf(" ORDER BY %s %s LIMIT ?", column, order)
	args = append(args, limit)

	// Log the final query for debugging purposes
	log.Printf("Executing query: %s with args: %v", query, args)

	// Execute the query
	rows, err := db.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, nil, logerror(err)
	}
	defer rows.Close()

	var results []*OrderItem
	var lastItem *OrderItem // Variable to store the last item

	for rows.Next() {
		oi := OrderItem{
			_exists: true,
		}
		if err := rows.Scan(
			&oi.OrderItemID, &oi.OrderID, &oi.ProductID, &oi.Quantity, &oi.PricePerUnit,
		); err != nil {
			return nil, nil, logerror(err)
		}
		results = append(results, &oi)
	}

	// Check for errors during row iteration.
	if err := rows.Err(); err != nil {
		return nil, nil, logerror(err)
	}

	// If we have results, set the lastItem to the last element in results.
	if len(results) > 0 {
		lastItem = results[len(results)-1]
	}

	return results, lastItem, nil
}

// OrderItemByOrderItemID retrieves a row from 'OrderItems' as a [OrderItem].
//
// Generated from index 'OrderItems_order_item_id_pkey'.
func OrderItemByOrderItemID(ctx context.Context, db DB, orderItemID int) (*OrderItem, error) {
	// query
	const sqlstr = `SELECT ` +
		`order_item_id, order_id, product_id, quantity, price_per_unit ` +
		`FROM OrderItems ` +
		`WHERE order_item_id = ?`
	// run
	logf(sqlstr, orderItemID)
	oi := OrderItem{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, orderItemID).Scan(&oi.OrderItemID, &oi.OrderID, &oi.ProductID, &oi.Quantity, &oi.PricePerUnit); err != nil {
		return nil, logerror(err)
	}
	return &oi, nil
}

// OrderItemByOrderIDProductID retrieves a row from 'OrderItems' as a [OrderItem].
//
// Generated from index 'order_id'.
func OrderItemByOrderIDProductID(ctx context.Context, db DB, orderID, productID int) (*OrderItem, error) {
	// query
	const sqlstr = `SELECT ` +
		`order_item_id, order_id, product_id, quantity, price_per_unit ` +
		`FROM OrderItems ` +
		`WHERE order_id = ? AND product_id = ?`
	// run
	logf(sqlstr, orderID, productID)
	oi := OrderItem{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, orderID, productID).Scan(&oi.OrderItemID, &oi.OrderID, &oi.ProductID, &oi.Quantity, &oi.PricePerUnit); err != nil {
		return nil, logerror(err)
	}
	return &oi, nil
}

// OrderItemsByProductID retrieves a row from 'OrderItems' as a [OrderItem].
//
// Generated from index 'product_id'.
func OrderItemsByProductID(ctx context.Context, db DB, productID int) ([]*OrderItem, error) {
	// query
	const sqlstr = `SELECT ` +
		`order_item_id, order_id, product_id, quantity, price_per_unit ` +
		`FROM OrderItems ` +
		`WHERE product_id = ?`
	// run
	logf(sqlstr, productID)
	rows, err := db.QueryContext(ctx, sqlstr, productID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*OrderItem
	for rows.Next() {
		oi := OrderItem{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&oi.OrderItemID, &oi.OrderID, &oi.ProductID, &oi.Quantity, &oi.PricePerUnit); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &oi)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Order returns the Order associated with the [OrderItem]'s (OrderID).
//
// Generated from foreign key 'orderitems_ibfk_1'.
func (oi *OrderItem) Order(ctx context.Context, db DB) (*Order, error) {
	return OrderByOrderID(ctx, db, oi.OrderID)
}

// Product returns the Product associated with the [OrderItem]'s (ProductID).
//
// Generated from foreign key 'orderitems_ibfk_2'.
func (oi *OrderItem) Product(ctx context.Context, db DB) (*Product, error) {
	return ProductByProductID(ctx, db, oi.ProductID)
}
